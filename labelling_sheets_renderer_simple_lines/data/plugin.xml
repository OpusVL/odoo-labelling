<?xml version="1.0" encoding="utf-8"?>
<openerp>
    <data>
        <record id="renderer" model="labelling.content.renderer">
            <field name="name">Simple Lines</field>
            <field name="model">labelling.content.renderer.plugin.simple_lines</field>
            <field name="help_html" type="xml">
                <h3>Description of Simple Lines renderer</h3>
                <ul>
                    <li>This renderer puts one field on each line.</li>
                    <li>
                        If the text is too wide for the label then the font size is
                        reduced until it fits.
                    </li>
                </ul>

                <h3>Configuration</h3>
                <p>
                    You should put in Renderer Config field a single JSON or YAML
                    object that looks something like this:
                </p>
                <pre>
                    {"lines": ["o.field1", "o.field2.name", ...],
                     "mapped": "order_line"}
                </pre>

                <h4>lines (required)</h4>
                <p>
                    The object must have the key "lines" whose value is a
                    an array of Python expressions.<br/>

                    The variable "o" in those expressions represents the
                    Odoo record that is to be rendered on the current label.
                </p>

                <p>
                    Note if the field is a numeric one, use this:
                </p>

                <pre>
                    "'{}'.format(o.price_unit)"
                </pre>

                <h4>mapped (optional)</h4>
                <p>
                    The object may also have an optional field "mapped"
                    whose value is the name of a field on your object.
                    If you provide this, then instead of getting labels
                    on the selected records, you will get labels on
                    all children of the selected records following these
                    fields.
                </p>
                <p>
                    So say your template is bound to the 'sale.order' object.

                    If "mapped" is set to "order_line", then if you select
                    one or more sale orders and print the labels for it then
                    o will be bound, in turn, to each of the members of the
                    One2many field order_line on each of the selected sale orders.
                </p>

                <h4>sorted (optional)</h4>

                <p>
                    If you provide the 'sorted' key, you must provide an array of pairs, thus:
                </p>
                <pre>
                    {"sorted": [["o.field2.name", "asc"], ["o.date", "desc"]],
                    }
                </pre>

                <p>
                    The variable "o" in those expressions represents the
                    Odoo record that is to be rendered on the current label.

                    Each pair contains a Python expression (into which the line is passed as 'o'
                    during the sort), and a direction which must be either "asc" or "desc" for ascending
                    or descending respectively.

                    The set of line objects will be sorted in the order.  In the above example every label
                    with the same value of o.field2.name will come out together in order, then within those
                    groups they will be sorted by o.date.
                </p>

                <h4>copies (optional)</h4>
                <p>
                    If you provide the 'copies' key, you must provide a Python expression enclosed in a string, e.g. for a sale order line you might use:
                </p>
                <pre>
                    {"copies": "int(o.product_uom_qty)"}
                </pre>
                <p>
                    This will specify the number of copies of each label that should be printed.<br/>
                    The variable "o" in those expressions is one Odoo record after the rules for "mapped" and "sorted"
                    have been applied.<br/>
                    Your expression MUST always return an integer.<br/>
                    In the above example, if o.product_uom_qty is 4 for a given record, then 4 copies will be printed.<br/>
                    Note this is applied before the number of copies requested in the print dialog, so if the user asks
                    for two copies of each label in there, then each label will be printed (2 &#215; 4 = 8) times.
                </p>

                <h4>font_size (optional, default=12)</h4>
                <p>
                    Specify the font size in points. Integer.  Defaults to 12.
                </p>
                <h4>line_gap (optional, default=6)</h4>
                <p>
                    Specify the gap to put between lines in points.
                    Integer.  Defaults to 6.
                </p>
                <h4>font_name (optional, default="Helvetica")</h4>
                <p>
                    The name of the font to use.  String. Defaults to "Helvetica".
                    Note that this is restricted
                    to the fonts that are made available by ReportLab.
                </p>
            </field>
        </record>
    </data>
</openerp>
